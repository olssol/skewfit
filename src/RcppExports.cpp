// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// rank_x
int rank_x(double x, NumericVector v);
RcppExport SEXP _skewfit_rank_x(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(rank_x(x, v));
    return rcpp_result_gen;
END_RCPP
}
// apnorm
double apnorm(double u);
RcppExport SEXP _skewfit_apnorm(SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(apnorm(u));
    return rcpp_result_gen;
END_RCPP
}
// cGetEw
NumericMatrix cGetEw(NumericVector x, double eta, double sig2);
RcppExport SEXP _skewfit_cGetEw(SEXP xSEXP, SEXP etaSEXP, SEXP sig2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    rcpp_result_gen = Rcpp::wrap(cGetEw(x, eta, sig2));
    return rcpp_result_gen;
END_RCPP
}
// cSlm0
double cSlm0(NumericVector y, NumericVector x);
RcppExport SEXP _skewfit_cSlm0(SEXP ySEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cSlm0(y, x));
    return rcpp_result_gen;
END_RCPP
}
// cSlm1
double cSlm1(NumericVector y, NumericVector x);
RcppExport SEXP _skewfit_cSlm1(SEXP ySEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cSlm1(y, x));
    return rcpp_result_gen;
END_RCPP
}
// cSlm
NumericVector cSlm(NumericVector y, NumericMatrix x);
RcppExport SEXP _skewfit_cSlm(SEXP ySEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cSlm(y, x));
    return rcpp_result_gen;
END_RCPP
}
// fit_para_skew
List fit_para_skew(NumericVector init_pa, NumericVector y, NumericVector x, NumericMatrix z, int max_steps, double tol);
RcppExport SEXP _skewfit_fit_para_skew(SEXP init_paSEXP, SEXP ySEXP, SEXP xSEXP, SEXP zSEXP, SEXP max_stepsSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type init_pa(init_paSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type max_steps(max_stepsSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_para_skew(init_pa, y, x, z, max_steps, tol));
    return rcpp_result_gen;
END_RCPP
}
// fit_iso_norm
List fit_iso_norm(NumericVector init_pa, NumericVector init_ai, NumericVector y, NumericVector x, NumericMatrix z, int unimodal, int max_steps, double tol);
RcppExport SEXP _skewfit_fit_iso_norm(SEXP init_paSEXP, SEXP init_aiSEXP, SEXP ySEXP, SEXP xSEXP, SEXP zSEXP, SEXP unimodalSEXP, SEXP max_stepsSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type init_pa(init_paSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type init_ai(init_aiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type unimodal(unimodalSEXP);
    Rcpp::traits::input_parameter< int >::type max_steps(max_stepsSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_iso_norm(init_pa, init_ai, y, x, z, unimodal, max_steps, tol));
    return rcpp_result_gen;
END_RCPP
}
// fit_iso_skew
List fit_iso_skew(NumericVector pa, NumericVector ai, NumericVector y, NumericVector x, NumericMatrix z, int unimodal, int usez, int max_steps, double tol);
RcppExport SEXP _skewfit_fit_iso_skew(SEXP paSEXP, SEXP aiSEXP, SEXP ySEXP, SEXP xSEXP, SEXP zSEXP, SEXP unimodalSEXP, SEXP usezSEXP, SEXP max_stepsSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type pa(paSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ai(aiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type unimodal(unimodalSEXP);
    Rcpp::traits::input_parameter< int >::type usez(usezSEXP);
    Rcpp::traits::input_parameter< int >::type max_steps(max_stepsSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_iso_skew(pa, ai, y, x, z, unimodal, usez, max_steps, tol));
    return rcpp_result_gen;
END_RCPP
}
// pred_iso
NumericMatrix pred_iso(NumericVector x, NumericMatrix iso_fit);
RcppExport SEXP _skewfit_pred_iso(SEXP xSEXP, SEXP iso_fitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type iso_fit(iso_fitSEXP);
    rcpp_result_gen = Rcpp::wrap(pred_iso(x, iso_fit));
    return rcpp_result_gen;
END_RCPP
}
// cPava
NumericVector cPava(NumericVector y, NumericVector w);
RcppExport SEXP _skewfit_cPava(SEXP ySEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(cPava(y, w));
    return rcpp_result_gen;
END_RCPP
}
// FPava
NumericVector FPava(NumericVector y, NumericVector w);
RcppExport SEXP _skewfit_FPava(SEXP ySEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(FPava(y, w));
    return rcpp_result_gen;
END_RCPP
}
// FUfit
List FUfit(NumericVector y, NumericVector w);
RcppExport SEXP _skewfit_FUfit(SEXP ySEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(FUfit(y, w));
    return rcpp_result_gen;
END_RCPP
}
// cIso
List cIso(NumericVector y, int unimodal);
RcppExport SEXP _skewfit_cIso(SEXP ySEXP, SEXP unimodalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type unimodal(unimodalSEXP);
    rcpp_result_gen = Rcpp::wrap(cIso(y, unimodal));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_skewfit_rank_x", (DL_FUNC) &_skewfit_rank_x, 2},
    {"_skewfit_apnorm", (DL_FUNC) &_skewfit_apnorm, 1},
    {"_skewfit_cGetEw", (DL_FUNC) &_skewfit_cGetEw, 3},
    {"_skewfit_cSlm0", (DL_FUNC) &_skewfit_cSlm0, 2},
    {"_skewfit_cSlm1", (DL_FUNC) &_skewfit_cSlm1, 2},
    {"_skewfit_cSlm", (DL_FUNC) &_skewfit_cSlm, 2},
    {"_skewfit_fit_para_skew", (DL_FUNC) &_skewfit_fit_para_skew, 6},
    {"_skewfit_fit_iso_norm", (DL_FUNC) &_skewfit_fit_iso_norm, 8},
    {"_skewfit_fit_iso_skew", (DL_FUNC) &_skewfit_fit_iso_skew, 9},
    {"_skewfit_pred_iso", (DL_FUNC) &_skewfit_pred_iso, 2},
    {"_skewfit_cPava", (DL_FUNC) &_skewfit_cPava, 2},
    {"_skewfit_FPava", (DL_FUNC) &_skewfit_FPava, 2},
    {"_skewfit_FUfit", (DL_FUNC) &_skewfit_FUfit, 2},
    {"_skewfit_cIso", (DL_FUNC) &_skewfit_cIso, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_skewfit(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
