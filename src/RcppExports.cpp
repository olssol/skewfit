// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// cGetEw
NumericMatrix cGetEw(NumericVector x, double eta, double sig2);
RcppExport SEXP _skewfit_cGetEw(SEXP xSEXP, SEXP etaSEXP, SEXP sig2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< double >::type sig2(sig2SEXP);
    rcpp_result_gen = Rcpp::wrap(cGetEw(x, eta, sig2));
    return rcpp_result_gen;
END_RCPP
}
// cSlm
double cSlm(NumericVector y, NumericVector x);
RcppExport SEXP _skewfit_cSlm(SEXP ySEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cSlm(y, x));
    return rcpp_result_gen;
END_RCPP
}
// cEMMdl3
List cEMMdl3(NumericVector init_pa, NumericVector init_ai, NumericVector y, NumericVector x, NumericVector z, int unimodal, int max_steps, double tol);
RcppExport SEXP _skewfit_cEMMdl3(SEXP init_paSEXP, SEXP init_aiSEXP, SEXP ySEXP, SEXP xSEXP, SEXP zSEXP, SEXP unimodalSEXP, SEXP max_stepsSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type init_pa(init_paSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type init_ai(init_aiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type unimodal(unimodalSEXP);
    Rcpp::traits::input_parameter< int >::type max_steps(max_stepsSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(cEMMdl3(init_pa, init_ai, y, x, z, unimodal, max_steps, tol));
    return rcpp_result_gen;
END_RCPP
}
// cEMMdl4
List cEMMdl4(NumericVector init_pa, NumericVector init_ai, NumericVector init_ci, NumericVector y, NumericVector x, NumericVector z, int unimodal, int max_steps, double tol);
RcppExport SEXP _skewfit_cEMMdl4(SEXP init_paSEXP, SEXP init_aiSEXP, SEXP init_ciSEXP, SEXP ySEXP, SEXP xSEXP, SEXP zSEXP, SEXP unimodalSEXP, SEXP max_stepsSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type init_pa(init_paSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type init_ai(init_aiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type init_ci(init_ciSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type unimodal(unimodalSEXP);
    Rcpp::traits::input_parameter< int >::type max_steps(max_stepsSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(cEMMdl4(init_pa, init_ai, init_ci, y, x, z, unimodal, max_steps, tol));
    return rcpp_result_gen;
END_RCPP
}
// cPava0
NumericVector cPava0(NumericVector y, NumericVector w);
RcppExport SEXP _skewfit_cPava0(SEXP ySEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(cPava0(y, w));
    return rcpp_result_gen;
END_RCPP
}
// cPava
NumericVector cPava(NumericVector y, NumericVector w);
RcppExport SEXP _skewfit_cPava(SEXP ySEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(cPava(y, w));
    return rcpp_result_gen;
END_RCPP
}
// cUfit
List cUfit(NumericVector y, NumericVector x, int unimodal);
RcppExport SEXP _skewfit_cUfit(SEXP ySEXP, SEXP xSEXP, SEXP unimodalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type unimodal(unimodalSEXP);
    rcpp_result_gen = Rcpp::wrap(cUfit(y, x, unimodal));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_skewfit_cGetEw", (DL_FUNC) &_skewfit_cGetEw, 3},
    {"_skewfit_cSlm", (DL_FUNC) &_skewfit_cSlm, 2},
    {"_skewfit_cEMMdl3", (DL_FUNC) &_skewfit_cEMMdl3, 8},
    {"_skewfit_cEMMdl4", (DL_FUNC) &_skewfit_cEMMdl4, 9},
    {"_skewfit_cPava0", (DL_FUNC) &_skewfit_cPava0, 2},
    {"_skewfit_cPava", (DL_FUNC) &_skewfit_cPava, 2},
    {"_skewfit_cUfit", (DL_FUNC) &_skewfit_cUfit, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_skewfit(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
